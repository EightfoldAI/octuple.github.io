{"version":3,"file":"main.css","mappings":"AAkGA","sources":["webpack://@eightfold.ai/octuple/./src/styles/abstracts/_functions.scss"],"sourcesContent":["// Extend sass-rem https://github.com/pierreburel/sass-rem\n// Update $baseline to set base pixel value\n\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:math';\n@use 'sass:meta';\n\n$baseline: 16px !default;\n$fallback: false !default;\n$px-only: false !default;\n\n// Dart Sass <1.33.0 compatibility\n@function _divide($a, $b) {\n    @if map.has-key(meta.module-functions('math'), 'div') {\n        @return math.div($a, $b);\n    }\n\n    @return $a / $b;\n}\n\n@function _convert($to, $values...) {\n    $result: ();\n    $separator: list.separator($values);\n\n    @each $value in $values {\n        @if meta.type-of($value) ==\n            'number' and\n            math.unit($value) ==\n            'rem' and\n            $to ==\n            'px'\n        {\n            $result: list.append(\n                $result,\n                _divide($value, 1rem) * $baseline,\n                $separator\n            );\n        } @else if\n            meta.type-of($value) ==\n            'number' and\n            math.unit($value) ==\n            'px' and\n            $to ==\n            'rem'\n        {\n            $result: list.append(\n                $result,\n                _divide($value, $baseline) * 1rem,\n                $separator\n            );\n        } @else if meta.type-of($value) == 'list' {\n            $result: list.append($result, _convert($to, $value...), $separator);\n        } @else {\n            $result: list.append($result, $value, $separator);\n        }\n    }\n\n    @return if(list.length($result) == 1, list.nth($result, 1), $result);\n}\n\n@function convert($values...) {\n    @if $px-only {\n        @return _convert(px, $values...);\n    } @else {\n        @return _convert(rem, $values...);\n    }\n}\n\n@mixin convert($properties, $values...) {\n    @if meta.type-of($properties) == 'map' {\n        @each $property, $values in $properties {\n            @include convert($property, $values);\n        }\n    } @else {\n        @each $property in $properties {\n            @if $fallback or $px-only {\n                #{$property}: _convert(px, $values...);\n            }\n            @if not $px-only {\n                #{$property}: _convert(rem, $values...);\n            }\n        }\n    }\n}\n\n@function rem($values...) {\n    @return convert($values...);\n}\n\n@mixin rem($properties, $values...) {\n    @include convert($properties, $values...);\n}\n\n@mixin baseline($zoom: 100%) {\n    font-size: _divide($zoom, 16px) * $baseline;\n}\n\nhtml {\n    @include baseline;\n}\n"],"names":[],"sourceRoot":""}